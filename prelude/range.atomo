class: Range: {
  include: Enumerable

  new.begin: begin end: end &exclusive?: False :=
    { begin = begin
      end = end
      exclusive? = exclusive?
    }

  == (other: { me }) :=
    equals?: other || [
      begin == other begin
      end == other end
      exclusive? == other exclusive?
    ] and

  matches?: value :=
    value > begin &&
      if: exclusive?
        then: { value < end }
        else: { value <= end }

  collect: action :=
    { result = []
      last = if: exclusive? then: { end - 1 } else: { end }
      current = begin
      while: { current <= last } do: {
        result << action call: current
        current = current succ
      }
      result
    } call

  step: action &size: 1 :=
    { result = []
      last = if: exclusive? then: { end - 1 } else: { end }
      current = begin
      while: { current <= last } do: {
        result << action call: current
        current = current next: size
      }
      result
    } call

  step &size: 1 :=
    { result = []
      last = if: exclusive? then: { end - 1 } else: { end }
      current = begin
      while: { current <= last } do: {
        result << current
        current = current next: size
      }
      result
    } call

  show :=
    if: exclusive?
      then: { begin show .. " ... " .. end show }
      else: { begin show .. " .. " .. end show }
}

x .. y := Range new.begin: x end: y

x ... y := Range new.begin: x end: y &exclusive?: True

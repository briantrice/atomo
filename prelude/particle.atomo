{ operator?: str := str all?: @(in?: "~!@#$%^&*-_=+./\\|<>?:")

  keywordfy: str :=
    if: (operator?: str)
      then: { str }
      else: { str .. ":" }

  slot: @none := "_"
  slot: @(ok: v) := v show

  (p: -> Particle) show :=
    { optionals :=
        p optionals
          (map: { o | " &" .. o from name .. ": " .. (slot: o to) })
          join

      p type match: {
        @keyword ->
          { vs := p targets map: { v | slot: v }

            initial :=
              vs head match: {
                "_" -> ""
                v -> v .. " "
              }

            rest :=
              (p names zip: vs tail)
                (map:
                  { pair |
                    keywordfy: pair from .. " " .. pair to
                  })
                (join: " ")

            if: (p targets (all?: @(== @none)) && p optionals empty?)
              then: { "@" .. p names (map: { n | keywordfy: n }) join }
              else: { "@(" .. initial .. rest .. optionals .. ")" }
          } call

        @single ->
          condition: {
            (p optionals empty? && p target == @none) ->
              "@" .. p name

            p target == @none ->
              "@(" .. p name .. optionals .. ")"

            otherwise ->
              { @(ok: t) = p target
                "@(" .. t show .. " " .. p name .. optionals .. ")"
              } call
          }
      }
    } call
} call

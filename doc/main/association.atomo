#title:{Associations}tag:"association"

#define:{
    Association
    > Object
}body:{
    A simple mapping from one value to another.
}

#define:{
    a -> b
    > Association
}body:{
    Create a new #hl:{Association} from #hl:{a} to #hl:{b}.
    
    This operator is right-associative and has a very low precedence level:

    #example:{
        1 -> $a
        True -> 10
        1 -> (2 -> (3 + 4))
    }
}

#define:{
    a from
    | a is-a?: Association
    > any
}body:{
    Yields #atomo:a's "from" value.

    #example:{
        (1 -> $a) from
    }
}

#define:{
    a to
    | a is-a?: Association
    > any
}body:{
    Yields #atomo:a's "to" value.

    #example:{
        (1 -> $a) to
    }
}

#define:{
    list lookup: from
    | list is-a?: List
    > in?: [@(ok: any), @none]
}body:{
    Looks up a key in a list of #hl:{Associations} by #hl:{from}, returning either the association's #hl:{to} value or #atomo:@none.

    #example:{
        [1 -> $a, 2 -> $b] lookup: 1
        [1 -> $a, 2 -> $b] lookup: 5
    }
}

#define:{
    list find: from
    | list is-a?: List
    > in?: [@(ok: Association), @none]
}body:{
    Similar to #hl:{lookup:}, except it returns the #hl:{Association} object rather than its #hl:{to} value.

    #example:{
        [1 -> $a, 2 -> $b] find: 1
        [1 -> $a, 2 -> $b] find: 5
    }
}

#define:{
    list set: key to: value
    | list is-a?: List
    > list
}body:{
    Sets an association from #hl:{key} to #hl:{value} in #hl:{list}, updating an association if it exists or adding it to the list if it doesn't.

    #example:{
        [1 -> $a, 2 -> $b] set: 2 to: $B
        [1 -> $a, 2 -> $b] set: 3 to: $c
    }
}

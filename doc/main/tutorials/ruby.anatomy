#annotated-source

#title:{Ruby in Atomo}tag:"ruby"

#row:{
  Ruby provides three powerful mechanisms for modular code and simple definition of class structures: modules, classes, and mixins. Atomo doesn't have these built into the language at the design level, but all three are rather easily implemented using Atomo itself, building upon its simple object system.

  This document will guide you through its implementation, which is entirely composed of macros; it should serve as a great introduction to metaprogramming in Atomo with macros.
}

#row:{
  Modules will be stored here, as #hl:{Association}s from the module's name, a string, to its contents, a list of expressions.

  Here we use #hl:{for-macro}, a reserved word that tells the parser to evaluate this expression before the macroexpansion phase. We'll also use it later to define helper methods for our macros to use.
}is:{
  for-macro *modules* = []
}

#row:{
  Next, we'll need a nice syntax for defining modules. We can use a neat trick with Atomo's parser here - #hl:{a: b: c} is parsed as #hl:{a: (b: c)} - that is, one keyword dispatch #hl:{a:} with another, #hl:{b: c}, as its second target (the first being the implicit toplevel object).

  We'll use #hl:{module} as the first keyword, and the keyword in the nested dispatch will be the name of the module. The second target in the nested dispatch will be the module's body, a block. Taking advantage of this, we get very simple module definition syntax, and also guarantee that a module can't be given some funky name.

  Here's what it'll look like:

  #atomo:{
    module: Foo: {
      -- body goes here
    }
  }
}

#row:{
  Registers the module, and just expands to the body block (though what it expands to isn't very important).
}is:{
  macro (module: (def: Dispatch))
    { name = def names head
      body = def targets at: 1
      add-module: name as: body contents
      body
    } call
}

#row:{
  #hl:{add-module:as:} is a small helper method for registering a module. We're using #hl:{super} here to specifically redefine the #hl:{*modules*} we created earlier.
}is:{
  for-macro add-module: (name: String) as: (body: List) :=
    super *modules* = *modules* set: name to: body
}

#row:{
  Now when we say #hl:{module: A: { b := 2 }}, a module #hl:{A} will be inserted into #hl:{*modules*}, associated with #hl:{['(b := 2)]} - a list of its contents.

  Nothing too useful yet - the fun begins when we #hl:{include:} it! So let's work on that.
}

#row:{
  Slurps a module, found via a given #hl:{name}, into its target, often the implicit toplevel object.
}is:{
  macro (target include: (name: Dispatch))
    include: name name on: target
}

#row:{
  Search for a module by name, panicking if it isn't registered. Returns an expression for defining the module's body onto the target.
}is:{
  for-macro include: (name: String) on: target :=
    *modules* (lookup: name) match: {
      @none -> error: @(unknown-module: name)

      @(ok: mod) ->
        { block =
            `Block new: (expand-body: mod on: `!top)
              arguments: [`!top]

          `(~target join: ~block with: ~target)
        } call
    }
}

#row:{
  It's important to note that we're using special names here, notably #hl:{!top}, to avoid name collision. These names are guaranteed to be safe; each time the macro expands, identifiers in a quasiquote beginning with an exclamation mark are decorated with a clock value, so there's no way for it to be confused with some other name from outside the expansion.
}

#row:{
  Maps over a given list of expressions, expanding its contents into their module or class forms.
}is:{
  for-macro expand-body: (exprs: List) on: target :=
    exprs map: { e | expand-expr: e on: target }
}

#row:{
  Come up with a method definition expression that has a the current instance as the method body's context. Ruby and Java use #code:{self} or #code:{this} for explicitly referring to this value, but both of these names are taken in Atomo, so we'll go with #hl:{me}.

  To be clear, here are the transformations it makes:

  #definitions:{
    #item:{#hl:{x := y}}is:{
      #atomo:{(me: { target }) x := me join: { y } }
    }

    #item:{#hl:{x: y := y + 1}}is:{
      #atomo:{(me: { target }) x: y := me join: { y + 1 } }
    }

    #item:{#hl:{new := { a = 1 }}}is:{
      #atomo:{(me: { target }) new := me clone do: { a = 1 } }
    }

    #item:{#hl:{new: y := { a = y }}}is:{
      #atomo:{(me: { target }) new: y := me clone do: { a = y } }
    }

    #item:{#hl:{new.foo: x bar: y := { a = x; b = y }}}is:{
      #atomo:{
        (me: { target }) new.foo: x bar: y :=
          me clone do: {
            a = x
            b = y
          }
      }
    }
  }
}is:{
  for-macro expand-expr: `(~name := ~body) on: target :=
    { with-me =
        `Dispatch new: name particle
          to: (name targets at: 0 put: `(me: { ~target }))
          &optionals: name optionals

      if: (initializer?: name particle)
        then: { `(~with-me := ~target clone do: ~body) }
        else: { `(~with-me := me join: { ~body }) }
    } call
}

#row:{
  Expands an #hl:{include:} expression into the module's body, executed onto the given target (the class object or another module).
}is:{
  for-macro expand-expr: `(include: ~(y: Dispatch)) on: target :=
    include: y name on: target
}

#row:{
  Leave everything else alone.
}is:{
  for-macro expand-expr: e on: _ := e
}

#row:{
  Determine if a given method name looks like an initializer. True if the name is #code:{new}, or if the first keyword is #code:{new} or starts with #code:{new.}.
}is:{
  for-macro initializer?: (name: Particle) :=
    name type match: {
      @single -> name == @new

      @keyword ->
        name names head == "new" ||
          name names head starts-with?: "new."
    }
}

#(math = Lobby clone)

#row:{
  We already have a pretty usably module system, so let's give it a whirl!

  #atomo:{
    module: Math: {
      -- an unexposed value
      some-helper = 10

      -- exposed methods
      pi := 3.14
      x := some-helper
    }
  }on:math

  #interaction:{
    include: Math
    pi
    x
  }on:math

  Ok, that seems to work. But that's very basic. Let's try including one module into another.

  #atomo:{
    module: MoreMath: {
      include: Math

      another-helper = pi

      pi*2 := another-helper * 2
    }
  }on:math

  #interaction:{
    include: MoreMath
    pi
    x
    pi*2
  }on:math

  And what happens when we include some unknown module?

  #interaction:{
    include: FooBar
  }on:math

  Hooray! Seems to all be in working order. So let's move on to classes.
}

#row:{
  Creates an anonymous class object, extending a given parent object, defaulting to #hl:{Object}.
}is:{
  macro (class: (b: Block))
    `(class: ~b extends: Object)

  macro (class: (b: Block) extends: obj)
    `(~(class-create: b contents) call: ~obj clone)
}on:this

#row:{
  Create a block for creating a class, given the class body (a list of expressions). This block takes a single argument: the target of the definitions, which is normally a clone of the parent object.

  The block also defines #hl:{me}, so that a class's body can refer to the class object.

  Again we're using a special name, #hl:{!o}, to prevent name collision.
}is:{
  for-macro class-create: (body: List) :=
    `Block new: (`(me = !o) . (expand-body: body on: `!o) .. [`!o])
              arguments: [`!o]
}on:this

#(greeter = Lobby clone)
#row:{
  So now we have fully-functional (anonymous) classes with mixins. We can play around with this a bit already:

  #atomo:{
    Greeter =
      class: {
        new: x := { name = x }
        say-hi := (name .. ": Hi!") print
      }
  }on:greeter

  #interaction:{
    Greeter (new: "John Smith") say-hi
  }on:greeter
}

#row:{
  That seems to be working pretty nicely. Now let's dig into class reopening! We'll be adding a second form of #hl:{class:}, this one taking a keyword dispatch very similar to the trick we used for #hl:{module:}. But now we can decide whether to define a new class or "reopen" an existing one.
}

#row:{
  This macro expands to an #hl:{if:then:else:} dispatch which checks if the class is in-scope. If it is, it simply calls the class creation body with the current class object, redefining all methods in the body. If it isn't defined, it just defines it.
}is:{
  macro (class: (c: Dispatch))
    { single = Particle new: c names head
      name = `Dispatch new: single to: ['this]
      body = c targets at: 1

      `(if: (responds-to?: ~single)
          then: { ~(class-create: body contents) call: ~name }
          else: { ~name = class: ~body } in-context)
    } call
}

#row:{
  Note that this works perfectly fine with arbitrary objects that weren't defined using our system. Everything expands to regular ol' objects and method definition - there is very little magic going on.

  To prove it, I'll go ahead and reopen #hl:{Number}, the object representing numeric values in Atomo, and add a little #hl:{plus:} method which will just be an alias for #hl:{+}.

  #atomo:{
    class: Number: {
      plus: y := + y
    }
  }on:this

  #interaction:{
    1 plus: 2
  }

  Ta-da!

  So far I've shown classes working and modules working, but not classes and modules working. So let's give that a shot.

  #(enum = Lobby clone)
  #atomo:{
    module: MyEnumerable: {
      all?: p :=
        { done |
          each: { x | (done yield: False) unless: (p call: x) }
          True
        } call/cc
    }

    class: LinkedList: {
      include: MyEnumerable

      new := { empty? = True }

      new.head: h tail: t :=
        { head = h
          tail = t
          empty? = False
        }

      from: (l: List) :=
        l reduce-right: { h t | LinkedList new.head: h tail: t }
            with: LinkedList new

      each: f :=
        if: empty?
          then: { @ok }
          else: {
            f call: head
            tail each: f
          }

      show :=
        if: empty?
          then: { "()" }
          else: {
            "(" .. head show .. " : " .. tail show .. ")"
          }
    }
  }on:enum

  Here I've implemented a (very) small subset of the #code:{Enumerable} module found in Ruby, and a basic linked list class. This class provides the necessary #hl:{each:} method, and includes the #hl:{Enumerable} module. Let's see if this works:

  #interaction:{
    x = LinkedList from: [1, 2]
    x each: { x | @(value: x) print }
    x all?: @(is-a?: Integer)
    x all?: @odd?
  }on:enum

  Looks good to me! Now that we have everything working, let's see what exactly these macros expand to.
}

#heading:{Digging In}

#row:{
  We'll use the ever-so-useful #hl:{expand} method to see what our macros are doing. Let's try it on a few variations of #hl:{class:}.

  #interaction:{
    `(class: { @ok }) expand
    `(class: { @ok } extends: Number) expand
    `(class: { new := { a = 1 }; is-one? := a == 1 }) expand
    `(class: A: { @ok }) expand
  }

  As you can see, anonymous classes expand into a call to a class-creation block; the block is called with the cloned parent as an argument, and any methods are defined on it. The block then returns the class object.

  We can also see that our bang-identifiers are being sprinkled with a bit of pixi dust that keeps them from colliding with other identifiers. In fact, the parser rejects these names, but they're well past the parsing stage.

  NOTE: Those numbers aren't quite right, which seems to be a bug in Anatomy, the tool that created this document. Normally you'd see different numbers with every expansion. Not a huge deal, but I'm looking into it.

  So what about including modules? What happens then? Let's see:

  #interaction:{
    `(include: Math) expand
    `(include: MoreMath) expand
  }on:math

  We see that including modules defines the module's contents onto a given target (in this case the toplevel object, #hl:{this}), with values defined with #hl:{=} unexported. They're kept within the block the methods are defined in, so they're still in-scope for them, but they're left alone. Including one module in another does the same as anything else, but what about including a module into a class definition?

  #interaction:{
    `(class: { include: MyEnumerable }) expand
  }on:enum

  Earlier we actually made #hl:{include:} inside of a class expand into something slightly different from the normal macro. The only thing we changed was that its target is the class object being built, rather than the context of the building. It's a bit tricky to explain, but basically we're making it so that #hl:{include: SomeModule} inside of a class body acts like #hl:{me include: SomeModule}.
}

#heading:{Wrapping Up}

#row:{
  In just a few lines of code we've written a simple, elegant, and efficient implementation of Ruby's #code:{module}, #code:{class}, and #code:{include} forms. What's more, code written using these forms doesn't force others to adopt these idioms - everything expands into simple Atomo code that's natural to any users of your API.

  We've used a few things you should remember: #hl:{for-macro} for defining helper methods and values for your macros, #hl:{macro} for code that creates code, and the use of #hl:{!bangs} to achieve hygienic macros without any mental overhead. We've also briefly shown #hl:{expand}, a very useful method to use when writing macros to see what's #italic:{really} happening to your code.

  You may have noticed something missing, though. You can't do this:

  #atomo:{
    class: A: {} extends: B
  }

  The implementation isn't too hard, though; just remember that it's actually parsed as #hl:{class: (A: {} extends: B)}. This is left as an exercise. Good luck!
}

#title:{Syntax}tag:"syntax"

Atomo has a rather simple-to-use syntax, enabled by the powerful Parsec library it uses for parsing.


#section:{General Rules}

Atomo is whitespace-sensitive. Operators and keywords must be surrounded by whitespace, and indentation provides hints to the parser when you don't want to use semicolons. For example; #hl:{1/2} is a #hl:{Rational}, while #hl:{1 / 2} is integral division. #hl:{foo-bar} is an identifier, while #hl:{foo - bar} is subtraction.

Requiring whitespace around operators enables the use of more symbols in identifier names, allowing pleasant conventions like questions marks (e.g. #hl:{empty?}) and exclamation points (e.g. #hl:{do-something-destructive!}) for indicating the behaviour of a method.

Atomo's whitespace indentation rules are similar to Haskell's - they are not as strict as Python's, you just increase the spacing amount to indicate continuing the previous line, and continue that indentation amount to indicate continuing the current "block" of code.

Using significant whitespace, this block:

#atomo:{
  { "hi" print
    goodbye
    2 + 2
  } call
}

is equivalent to:

#atomo:{
  { "hi" print; goodbye; 2 + 2 } call
}

Two spaces for indentation is highly recommended, as it commonly aligns things perfectly on one column. For example, a block's arguments, its contents, and the message sent to the block all end up on the same column:

#atomo:{
  { foo |
    do-something: foo
    foo * 2
    [ foo
      foo + 1
      foo * 2
    ] length
  } call: [2]
}

Using this convention you also avoid stray closing braces, which would be common with the main alternative indentation style.

Don't do this:

#atomo:{
  foo := [1, 2, 3] map: { n |
    -- ...
  }
}

as it indicates the final closing brace is somehow related to #hl:{foo}, when really it's just the ending delimiter for the block passed to #hl:{map:}.

Whitespace can also be used for chained message sends:

#atomo:{
  something
    foo
    (+ 2)
    sqrt
}

Which is parsed as:

#atomo:{ something foo (+ 2) sqrt }

Multiple-keyword messages can also be continued via indentation:

#atomo:{
  if: x
    then: { y }
    else: { z }
}

Note that to continue the keyword message the next keywords must be indented more than the initial keyword.

#atomo:{
  0 up-to: 5
      do: { n | n print } -- OK; "do:" is indented more than "up-to:"

  something up-to: 5
    do: { n | n print } -- NOT OK; "do:" is deindented

  something up-to: 5
              do: { n | n print } -- OK

  something
    up-to: 5
      do: { n | n print } -- OK
}

Any whitespace following an operator or keyword is skipped, so you can start a new line and indent from there if you like:

#atomo:{
  x foo =
    { a = 1
      a + 1
    } call
}

Which is parsed as:

#atomo:{ x foo = { a = 1; a + 1 } call }


#section:{Comments}

Atomo uses the same comment syntax as Haskell: #code:{--} for linewise comments, #code:{{- -}} for block comments (which can be nested).


#section:{Literals}tag:"literals-syntax"

#definitions:{
  #item:{integers}is:{
    #hl:{1}, #hl:{2}, #hl:{-1}, ..., plus hexadecimal notation (e.g. #code:{0xdeadbeef})
  }

  #item:{doubles}is:{#hl:{1.0}, #hl:{2.0}, #hl:{-1.5}, ..., plus scientific notation (e.g. #code:{1.5e10})}

  #item:{characters}is:{
    #hl:{$a}, #hl:{$b}, #hl:{$\n}, #hl:{$\1234} (unicode number)...

    Escape codes supported (in addition to numeric escapes):
    
    #verbatim:{
      ascii-2:
        \b \t \n \v \f \r \SO \SI \EM \FS \GS \RS \US ␣ (space)
        \BS \HT \LF \VT \FF \CR \SO \SI \EM \BS \GS \RS \US \SP

      ascii-3:
        \NUL \SOH \STX \ETX \EOT \ENQ \ACK \a \DLE \DC1 \DC2
        \DC3 \DC4 \NAK \SYN \ETB \CAN \SUB \ESC \DEL
    }
  }

  #item:{rationals}is:{#hl:{1/2}, #hl:{30/500}, #hl:{-1/2}, ...}

  #item:{strings}is:{#hl:{""}, #hl:{"foo"}, #hl:{"fizz \"buzz\""}, containing the above-mentioned escape codes}

  #item:{boolean}is:{#hl:{True} and #hl:{False}}

  #item:{lists}is:{#hl:{[]}, #hl:{[1, 2]}, #hl:{[1, $2, "three"]}, ...}

  #item:{expressions}is:{
    #definitions:{
      #item:{quoted}is:{
        An apostrophe (#code:{'}) before an expression "quotes" it, turning it into an expression literal:
        
        #example-segment:{
          '1
          'a
          '(1 + 1)
          ''(1 + b)
          '{ a = 1; a + 1 }
        }
      }

      #item:{quasiquoted}is:{
        Atomo supports quasiquotation as seen in most Lisps, most similarly Clojure. A backquote (#code:{`}) begins a quasiquote, inside of which you can use tilde (#code:{~}) to "unquote".

        These can be nested infinitely; unquoting works inside of aggregate expressions such as lists, blocks, and definitions.

        #example:{
          `1
          `(1 + ~(2 + 2))
          ``(1 + ~~(2 + 2))
          `{ a = ~(2 + 2) }
          `[1, 2, ~(1 + 2)]
        }

        Note that unquoting too far throws an #hl:{@out-of-quote:} error.

        #example:{
          `~~(2 + 2)
        }

        Identifiers beginning with #code:{!} inside of a quasiquote are decorated with a clock value to ensure name collision does not occur in a macro's expansion. This is similar to Common Lisp's #hl:{gensym} mechanism, but it is automated and more implicit.

        #example:{
          a = '{ x + 2 }
          `{ !x | ~a } expand
        }
      }
    }
  }

  #item:{particles}is:{
    Particles begin with an at-sign (#code:{@}), followed by a "partial message."

    For single-messages, a particle always looks like this:

    #atomo:{
      @foo
      @fizz-buzz
    }

    Keyword particles are more complex, and may contain placeholders (#code:{_}):

    #atomo:{
      @(print: "hi!")
      @(+ 2)
      @(from: _ to: 3)
    }

    Additionally, the value parts may be omitted entirely, leaving only selector names:

    #atomo:{
      @from:to:
      @+
    }

    These are equivalent to #code:{@(from: _ to: _)} and #code:{@(+ _)}, respectively.

    Particles represent messages that are missing the initial role; hence, when you say #hl:{@(+ 2)}, you're representing a message like #hl:{_ + 2}, where #hl:{_} is filled in with a value to form a message like #hl:{1 + 2}.

    Note that, at the moment, all particles are missing an initial role. Hence, they are always partial. There is no such thing as #code:{@(2 foo)} or #code:{@(1 + 2)}. While support for that would be trivial (the parser would just need to be updated), there are other implications that need to be considered - for example, when you have a completed #hl:{Particle}, it's essentially a #hl:{Message}, but having the parser determine what you mean when you write #code:{@(2 + 2)} is tricky.
  }

  #item:{blocks}is:{
    Blocks are surrounded by curly braces (#code:{{ }}) and contain 0 or more expressions separated by semicolons or whitespace.
    
    A block may have arguments, which are pattern-matches separated by spaces. The arguments are placed after the opening brace, and are terminated by a pipe (#code:{|}), followed by the block's contents (if any).

    #example-segment:{
      { 1 + 1 }
      { a | a * 2 }
      { }
      { a b | a + b }
      { a b | }
      { "hi" print; another; 6 * 7 }
      { a (b . c) | x; y; z }
    }

    Block parsing is whitespace-aware; see #reference:{General Rules}.
  }

  #item:{scope}is:{
    #hl:{this} always refers to the current toplevel object.

    #example:{
      { a = 1; this } call
      x = this
      { a = 1; @(them: x me: this) } call
    }
  }
}


#section:{Pattern-Matching & Inserting Slots}tag:"pattern-syntax"

Atomo's pattern-match syntax shares the same syntax as Expressions in the language. In many cases these are recursive.

The #hl:{=} operator macro performs pattern-matching; the left-hand side is the pattern and the right-hand side is an expression whose resulting value should match the pattern.

#definitions:{
  #item:{#hl:{_}, #hl:{foo}, ...}is:{
    Possibly-named wildcard matches.

    #example:{
      _ = 1
      a = 2
      a
    }
  }

  #item:{#hl:{1}, #hl:{2/3}, #hl:{4.0}, #hl:{$a}, #hl:{True}, #hl:{False}, #hl:{"foo"}, ...}is:{
    Primitive literal values match only on themselves.

    #example:{
      1 = 1
      1 = 2
      $a = $a
      2/3 = 2/3
      4.0 = 4.0
      4.0 = 4.000000000001
      "foo" = "foo"
    }
  }

  #item:{#hl:{foo: pattern}}is:{
    A named pattern-match. Matches #hl:{pattern}, binding the value it matches to #hl:{foo}.

    #example:{
      (foo: 2) = 2
      foo
      (foo: 2) = 1
    }
  }

  #item:{#hl:{head . tail}}is:{
    Matches a non-empty list, matching its first value on #hl:{head} and the rest of it on #hl:{tail}.

    #example:{
      (x . xs) = [1, 2, 3]
      x
      xs
    }
  }

  #item:{#hl:{[]}, #hl:{[pattern, pattern-2]}, ...}is:{
    Matches a list of fixed length, recursively matching each #hl:{pattern} on each of its values.

    #example:{
      [a, b] = [1, 2]
      [c, 4] = [3, 4]
      [a, b, c]
    }
  }

  #item:{#hl:{@foo}, #hl:{@(foo: x)}, #hl:{@(foo: x bar: _)}, ...}is:{
    Matches a particle value. If it's a single particle, it does regular equality checking; if it's a keyword particle, it recursively pattern-matches the particle's values. A wildcard in a particle pattern matches placeholders, but no other pattern will.

    #example:{
      @foo = @foo
      @foo = @bar
      @(foo: x) = @(foo: 2)
      x
      @(foo: _) = @(foo: _)
      @(foo: _) = @(foo: 2)
      @(foo: 2) = @(foo: _)
    }
  }

  #item:{#hl:{`a}, #hl:{`(1 + ~b)}, ...}is:{
    Matches expression values recursively. Unquotes serve as named wildcard patterns, with the same recursive semantics as quasiquotation.

    #example:{
      `a = `a
      `(1 + ~b) = '(1 + 2)
      ``(1 + ~~c) = ``(1 + ~3)
      [b, c]
    }
  }

  #item:{#hl:{-> pattern}}is:{
    Matches any object delegating to something matching #code:{pattern}. Often used to check if something is an "instance" of some object.

    For primitive values, it checks if the value itself matches the pattern, so #hl:{[1, 2]} will match #code:{(-> List)}.

    NOTE: This is only really useful in #hl:{match:} and in message patterns; when used with #hl:{=} the objects aren't evaluated.

    #example:{
      1 match: { (-> Double) -> @nope; (-> Integer) -> @yep }
      [1, 2] match: { (-> [a, b]) -> @(yep: [b, a]) }
    }
  }

  #item:{#hl:{== pattern}}is:{
    Matches with strict equality only. This is different from regular matching as it doesn't follow delegates to see if objects match.

    #example:{
      X = Object clone
      X match: { (== X) -> @yep }
      X clone match: { (== X) -> @yep; _ -> @nope }
    }
  }

  The #hl:{=} operator can also be used to define methods, but its use is more limited than #hl:{:=} in that it can only insert slots on objects; it cannot pattern-match message roles, and the right-hand side is always pre-evaluated.

  #example:{
    a = Object clone
    a foo: self = 10
    a foo: self
    a foo: { @ok } spawn
    a foo: self = "Hello, world!" print
    a foo: self
  }
}


#section:{Definitions}tag:"definition-syntax"

Method definitions use the #hl:{:=} operator macro; the left-hand side is a "message pattern," which matches on messages sent to any of the roles involved in it. The right-hand side is the expression to be evaluated when the message pattern is matched.

Message patterns can contain the patterns listed above as their roles, with the sole exception that capitalized identifiers in role patterns are assumed to be objects.

#example-segment:{
  Foo bar := 1
  Foo bar: baz := 1
}

Above, the first definition is placed on the particular object #hl:{Foo} (assuming it's defined), while the second definition is placed on the #hl:{Foo} object as well as #hl:{Object} (the second role, a named wildcard), binding the second role value as #hl:{baz}.

To define on a particular object that isn't capitalized, wrap it in a block:

#example-segment:{
  foo bar := 1
  { foo } bar := 2
  { "hi" print; 1 + 1 } bar: Foo := 3
}

As in the first example, #hl:{foo bar} matches any object, while #hl:{{ foo } bar} is only defined on #hl:{foo} (the result of the block's execution). #hl:{{ 1 + 1 } bar: Foo} is defined on #hl:{2} and #hl:{Foo}.

The targets implied by the respective patterns in a definition are as follows:

#definitions:{
  #item:{#hl:{_}, #hl:{foo}, #hl:{bar}, ...}is:{#hl:{Object}}
  #item:{#hl:{1}, #hl:{2}, ...}is:{#hl:{Integer}}
  #item:{#hl:{$a}, #hl:{$b}, ...}is:{#hl:{Char}}
  #item:{#hl:{True}, #hl:{False}}is:{#hl:{Boolean}}
  #item:{#hl:{1.0}, #hl:{2.0}, ...}is:{#hl:{Double}}
  #item:{#hl:{1/2}, #hl:{3/4}, ...}is:{#hl:{Rational}}
  #item:{#hl:{""}, #hl:{"foo"}, ...}is:{#hl:{String}}
  #item:{#hl:{head . tail}, #hl:{[]}, #hl:{[pattern, pattern-2]}, ...}is:{#hl:{List}}
  #item:{#hl:{`x}, #hl:{`(1 + ~y)}, ...}is:{#hl:{Expression}}
  #item:{#hl:{@foo}, #hl:{@(bar: 2 baz: _)}, ...}is:{#hl:{Particle}}
  #item:{#hl:{foo: pattern}}is:{target of #code:{pattern}}
  #item:{#hl:{-> pattern}}is:{target of #code:{pattern}}
  #item:{#hl:{== pattern}}is:{target of #code:{pattern}}
  #item:{#hl:{Foo}, #hl:{Foo bar}, #hl:{{ expr; expr-2 }}, ...}is:{the object itself, or the object yielded by the block's execution}
}

Thus, #hl:{1 foo: $a := x} is a definition placed on #hl:{Integer} and #hl:{Char}.


#section:{Dispatch}tag:"dispatch-syntax"

Atomo's dispatch syntax is similar to the Smalltalk family, naming conventions aside. There are two types of messages to dispatch: single messages and keyword messages.

To dispatch a single message to some target, the message name is placed after the target value, separated by whitespace.

#example-segment:{
  1 foo
  { 1 + 1 } call
}

If there is no "target" for the message, the implied target is #hl:{this} (the toplevel object representing the current scope).

Keyword messages are slightly different in that they have more than one target, each separated by a "keyword" which is part of one whole message. Like single messages, if there is no initial role, #hl:{this} is assumed.

#example:{
  3 divides?: 12
  1 + 2
  (0 .. 10) from: 3 to: 5
}

Keyword message dispatch normally requires parentheses to chain multiple message sends, starting from the start of the chain to the end of the current dispatch. This leads to a lot of jumping around whenever you want to add another keyword dispatch:

#atomo:{
  (((1 x: a) y: b) z: c) foo
}

Atomo remedies this by allowing parentheses to be used inside the chain of sends itself, effectively turning keyword message dispatch into something that's as easily chained as single messages:

#atomo:{
  1 (x: a) (y: b) (z: c) foo
}


#section:{Defining Macros}tag:"macro-syntax"

To define macros, use the #code:{macro} keyword, followed by the macro's dispatch pattern wrapped in parentheses, and then the expression to evaluate to yield the replacement expression.

A macro's dispatch pattern is very similar to definition message patterns, except (and perhaps obviously) it can only match expressions. If a macro's role patterns do not match the expressions, it simply isn't called; the macro isn't found, so nothing happens.

A macro's role patterns are as follows:

#definitions:{
  #item:{#hl:{_}, #hl:{foo}, ...}is:{
    Possibly-named wildcard matches.

    #example:{
      macro (x squared) `(~x * ~x)
      '(42 squared) expand
      42 squared
    }
  }

  #item:{#hl:{foo: pattern}}is:{
    A named pattern-match. Matches #hl:{pattern}, binding the expression it matches to #hl:{foo}.

    #interaction:{
      macro ((x: Primitive) square-root) `(~x ^ (1.0 / 2.0))
      2 square-root
      [1] square-root
    }
  }

  #item:{#hl:{Dispatch}, #hl:{Operator}, #hl:{Primitive}, #hl:{Block}, #hl:{List}, #hl:{Macro}, #hl:{Particle}, #hl:{Top}, #hl:{Quote}, #hl:{Unquote}}is:{
    Match on the type of the expression.

    #interaction:{
      macro (Top foo) `10
      foo
      $a foo
    }
  }

  #item:{#hl:{`a}, #hl:{`(1 + ~b)}, ...}is:{
    Matches expression recursively. Unquotes serve as named wildcard patterns, with the same recursive semantics as quasiquotation.

    #example:{
      macro (`(~a -> ~b) from) a
      (1 -> $a) from
      (1 + 2) from
    }
  }

  The entire Atomo runtime is usable during macro expansion; you can do whatever you want in a macro defintion, so long as the macro's result is an #hl:{Expression} value.

  Another keyword is provided, which evaluates an expression as soon as the parser runs into it; often for use with macros. It is aptly named #code:{for-macro}.

  #example-segment:{
    for-macro 1 print
    for-macro Foo = Object clone
  }
}


#section:{Operator Precedence & Associativity}tag:"operator-syntax"

You can control how Atomo parses binary operators like #hl:{+} and #hl:{->} via the #code:{operator} keyword. The basic syntax is as follows (square brackets indicating an optional segment, ellipses indicating 1 or more):

#verbatim:{
  operator [associativity] [precedence] operators
    where
      associativity = right | left
      precedence = integer
      operators = operator ...
}

An omitted associativity implies left, and an omitted precedence implies 5 (the default). One of the two must be provided.

#example-segment:{
  operator right 0 ->
  operator right 8 ^
  operator 7 % * /
  operator 6 + -
}

Operator expressions, when evaluated, just return #hl:{@ok}.

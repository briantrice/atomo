<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>bundleUUID</key>
    <string>13A7DC7D-6E14-460B-B964-A45BDFAAFAEC</string>
    <key>fileTypes</key>
    <array>
        <string>atomo</string>
        <string>eco</string>
    </array>
    <key>foldingStartMarker</key>
    <string>^\s*[_A-z0-9]+@.+$</string>
    <key>foldingStopMarker</key>
    <string>^.*(\])[A-z ]*\.$</string>
    <key>name</key>
    <string>Atomo</string>
    <key>patterns</key>
    <array>
        <dict>
            <key>match</key>
            <string>\b(if:|then:|else:|error:|warn:|while:|unless:|signal:)\b</string>
            <key>name</key>
            <string>keyword.control.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(macro|for-macro|operator)\b</string>
            <key>name</key>
            <string>keyword.other.reserved.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(this|self|me)\b</string>
            <key>name</key>
            <string>variable.language.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>&amp;([[:alpha:]_!@#%&amp;*-./\?:\p{S}]+:)</string>
            <key>name</key>
            <string>variable.parameter.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>@([[:alpha:]_!@#%&amp;*-./\?:\p{S}]+)</string>
            <key>name</key>
            <string>constant.other.particle.atomo</string>
        </dict>
        <dict>
            <key>begin</key>
            <string>@\(</string>
            <key>end</key>
            <string>\)</string>
            <key>name</key>
            <string>constant.other.particle.atomo</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#nest_parens</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>$base</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>match</key>
            <string>['`]([[:alpha:]_!@#%&amp;*-./\?:\p{S}]+)</string>
            <key>name</key>
            <string>constant.other.expression.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>~([[:alpha:]_!@#%&amp;*-./\?:\p{S}]+)</string>
            <key>name</key>
            <string>string.interpolated.expression.atomo</string>
        </dict>
        <dict>
            <key>begin</key>
            <string>['`]\(</string>
            <key>end</key>
            <string>\)</string>
            <key>name</key>
            <string>string.quoted.other.expression.atomo</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#nest_parens</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>$base</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>begin</key>
            <string>~\(</string>
            <key>end</key>
            <string>\)</string>
            <key>name</key>
            <string>string.interpolated.expression.atomo</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#nest_parens</string>
                </dict>
                <dict>
                    <key>include</key>
                    <string>$base</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>begin</key>
            <string>(?![&amp;@$~:\d])([[:alnum:]_!@#%&amp;*-./\?\p{S}]+)(["$|`'~@])</string>
            <key>end</key>
            <string>\2</string>
            <key>name</key>
            <string>string.quoted.other.macro-quote.atomo</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>\\.</string>
                    <key>name</key>
                    <string>constant.character.escape.atomo</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>begin</key>
            <string>(?![&amp;@$~:\d])([[:alnum:]_!@#%&amp;*-./\?\p{S}]+)\(</string>
            <key>end</key>
            <string>\)</string>
            <key>name</key>
            <string>string.quoted.other.macro-quote.atomo</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>\\.</string>
                    <key>name</key>
                    <string>constant.character.escape.atomo</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>begin</key>
            <string>(?![&amp;@$~:\d])([[:alnum:]_!@#%&amp;*-./\?\p{S}]+)\[</string>
            <key>end</key>
            <string>\]</string>
            <key>name</key>
            <string>string.quoted.other.macro-quote.atomo</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>\\.</string>
                    <key>name</key>
                    <string>constant.character.escape.atomo</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>begin</key>
            <string>(?![&amp;@$~:\d])([[:alnum:]_!@#%&amp;*-./\?\p{S}]+)\{</string>
            <key>end</key>
            <string>\}</string>
            <key>name</key>
            <string>string.quoted.other.macro-quote.atomo</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>\\.</string>
                    <key>name</key>
                    <string>constant.character.escape.atomo</string>
                </dict>
            </array>
        </dict>
        <dict>
            <key>include</key>
            <string>#string</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#character</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#line_comment</string>
        </dict>
        <dict>
            <key>include</key>
            <string>#block_comment</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(&amp;&amp;|\|\||and:|or:|xor:|not)\b</string>
            <key>name</key>
            <string>keyword.operator.logical.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(True|False)\b</string>
            <key>name</key>
            <string>constant.language.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(?i:(0x\h*))</string>
            <key>name</key>
            <string>constant.numeric.integer.hexadecimal.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(?i:(0o[0-7]*))</string>
            <key>name</key>
            <string>constant.numeric.integer.octal.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(?i:(\d+\.\d*(e[\-\+]?\d+)?))(?=[^a-zA-Z_])</string>
            <key>name</key>
            <string>constant.numeric.float.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>(?&lt;=[^0-9a-zA-Z_])(?i:(\.\d+(e[\-\+]?\d+)?))</string>
            <key>name</key>
            <string>constant.numeric.float.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b(?i:(\d+e[\-\+]?\d+))</string>
            <key>name</key>
            <string>constant.numeric.float.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b([\-\+]?\d+/[\-\+]?\d+)</string>
            <key>name</key>
            <string>constant.numeric.rational.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\b([\-\+]?\d+)</string>
            <key>name</key>
            <string>constant.numeric.integer.decimal.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>(?![&amp;@$~:])([[:alpha:]_!@#%&amp;*-./\?\p{S}]+:)</string>
            <key>name</key>
            <string>variable.other.keyword.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>(?:^|\s)(?!--)([!@#%&amp;*-./\?:\p{S}]+)(?:$|\s)</string>
            <key>name</key>
            <string>keyword.operator.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>([A-Z][[:alnum:]_!@#%&amp;*-./\?\p{S}]+)</string>
            <key>name</key>
            <string>variable.other.atomo, entity.name.class</string>
        </dict>
        <dict>
            <key>match</key>
            <string>(?![&amp;@$~:\d])([[:alnum:]_!@#%&amp;*-./\?\p{S}]+)</string>
            <key>name</key>
            <string>variable.other.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>,</string>
            <key>name</key>
            <string>punctuation.separator.object.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\{|\}</string>
            <key>name</key>
            <string>punctuation.section.scope.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\[|\]</string>
            <key>name</key>
            <string>punctuation.section.array.atomo</string>
        </dict>
        <dict>
            <key>match</key>
            <string>\(|\)</string>
            <key>name</key>
            <string>punctuation.section.function.atomo</string>
        </dict>
    </array>
    <key>repository</key>
    <dict>
        <key>nest_parens</key>
        <dict>
            <key>begin</key>
            <string>\(</string>
            <key>end</key>
            <string>\)</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#nest_parens</string>
                </dict>

                <dict>
                    <key>include</key>
                    <string>$base</string>
                </dict>
            </array>
        </dict>
        <key>line_comment</key>
        <dict>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.comment.atomo</string>
                </dict>
            </dict>
            <key>match</key>
            <string>(--).*$\n?</string>
            <key>name</key>
            <string>comment.line.double-dash.atomo</string>
        </dict>
        <key>block_comment</key>
        <dict>
            <key>applyEndPatternLast</key>
            <integer>1</integer>
            <key>begin</key>
            <string>\{-</string>
            <key>captures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.comment.atomo</string>
                </dict>
            </dict>
            <key>end</key>
            <string>-\}</string>
            <key>name</key>
            <string>comment.block.atomo</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>include</key>
                    <string>#block_comment</string>
                </dict>
            </array>
        </dict>
        <key>string</key>
        <dict>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.begin.atomo</string>
                </dict>
            </dict>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
                <key>0</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.end.atomo</string>
                </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.double.atomo</string>
            <key>patterns</key>
            <array>
                <dict>
                    <key>match</key>
                    <string>\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\"'\&amp;])</string>
                    <key>name</key>
                    <string>constant.character.escape.atomo</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>\\o[0-7]+|\\x[0-9A-Fa-f]+|\\[0-9]+</string>
                    <key>name</key>
                    <string>constant.character.escape.octal.atomo</string>
                </dict>
                <dict>
                    <key>match</key>
                    <string>\^[A-Z@\[\]\\\^_]</string>
                    <key>name</key>
                    <string>constant.character.escape.control.atomo</string>
                </dict>
            </array>
        </dict>
        <key>character</key>
        <dict>
            <key>captures</key>
            <dict>
                <key>1</key>
                <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.begin.atomo</string>
                </dict>
                <key>2</key>
                <dict>
                    <key>name</key>
                    <string>constant.character.escape.atomo</string>
                </dict>
                <key>3</key>
                <dict>
                    <key>name</key>
                    <string>constant.character.escape.octal.atomo</string>
                </dict>
                <key>4</key>
                <dict>
                    <key>name</key>
                    <string>constant.character.escape.hexadecimal.atomo</string>
                </dict>
                <key>5</key>
                <dict>
                    <key>name</key>
                    <string>constant.character.escape.control.atomo</string>
                </dict>
            </dict>
            <key>match</key>
            <string>(?x)
            (\$)
            (?:
                [A-Za-z0-9]                             # Basic Char
              | (\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE
                    |DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS
                    |US|SP|DEL|[abfnrtv\\\"'\&amp;]))       # Escapes
              | (\\o[0-7]+)                             # Octal Escapes
              | (\\x[0-9A-Fa-f]+)                       # Hexadecimal Escapes
              | (\^[A-Z@\[\]\\\^_])                     # Control Chars
              | [\ !#$%\&amp;\*\+\.\/&lt;=&gt;\?\@\\\^\|_~":]       # Other Chars
            )
            </string>
            <key>name</key>
            <string>constant.character.atomo</string>
        </dict>
    </dict>
    <key>scopeName</key>
    <string>source.atomo</string>
    <key>uuid</key>
    <string>694240EA-4786-4E3C-B490-F0F876BF2795</string>
</dict>
</plist>